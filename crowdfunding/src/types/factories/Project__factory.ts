/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Project, ProjectInterface } from "../Project";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "founders",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "categories",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "image",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "social",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "mail",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "goalAmount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "ownerWallet",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "projAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "ProjectCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "projectTitle",
        type: "string",
      },
      {
        internalType: "string",
        name: "projDescription",
        type: "string",
      },
      {
        internalType: "string",
        name: "projFounders",
        type: "string",
      },
      {
        internalType: "string",
        name: "projCategories",
        type: "string",
      },
      {
        internalType: "string",
        name: "projImage",
        type: "string",
      },
      {
        internalType: "string",
        name: "projSocial",
        type: "string",
      },
      {
        internalType: "string",
        name: "projMail",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "projGoalAmount",
        type: "uint256",
      },
    ],
    name: "createProject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "publishedProjs",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalPublishedProjs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e5a806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c8063591d0a09146200004b578063e2230f28146200007f578063f200e2d81462000098575b600080fd5b620000626200005c366004620001d0565b620000aa565b6040516001600160a01b0390911681526020015b60405180910390f35b620000966200009036600462000295565b620000d5565b005b60005460405190815260200162000076565b60008181548110620000bb57600080fd5b6000918252602090912001546001600160a01b0316905081565b60008888888888888888604051620000ed90620001c2565b6200010098979695949392919062000420565b604051809103906000f0801580156200011d573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b038316179055604051909150429033907fd89cfe1f60c0a1beb6a7f4838d48214ff3307da0cf6a442a5eeaeb2ef261f6a290620001af908d908d908d908d908d908d908d908d908d90620004d0565b60405180910390a3505050505050505050565b610892806200059383390190565b600060208284031215620001e357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200021257600080fd5b813567ffffffffffffffff80821115620002305762000230620001ea565b604051601f8301601f19908116603f011681019082821181831017156200025b576200025b620001ea565b816040528381528660208588010111156200027557600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600080610100898b031215620002b357600080fd5b883567ffffffffffffffff80821115620002cc57600080fd5b620002da8c838d0162000200565b995060208b0135915080821115620002f157600080fd5b620002ff8c838d0162000200565b985060408b01359150808211156200031657600080fd5b620003248c838d0162000200565b975060608b01359150808211156200033b57600080fd5b620003498c838d0162000200565b965060808b01359150808211156200036057600080fd5b6200036e8c838d0162000200565b955060a08b01359150808211156200038557600080fd5b620003938c838d0162000200565b945060c08b0135915080821115620003aa57600080fd5b50620003b98b828c0162000200565b92505060e089013590509295985092959890939650565b6000815180845260005b81811015620003f857602081850181015186830182015201620003da565b818111156200040b576000602083870101525b50601f01601f19169290920160200192915050565b6000610100808352620004368184018c620003d0565b905082810360208401526200044c818b620003d0565b9050828103604084015262000462818a620003d0565b90508281036060840152620004788189620003d0565b905082810360808401526200048e8188620003d0565b905082810360a0840152620004a48187620003d0565b905082810360c0840152620004ba8186620003d0565b9150508260e08301529998505050505050505050565b6000610120808352620004e68184018d620003d0565b90508281036020840152620004fc818c620003d0565b9050828103604084015262000512818b620003d0565b9050828103606084015262000528818a620003d0565b905082810360808401526200053e8189620003d0565b905082810360a0840152620005548188620003d0565b905082810360c08401526200056a8187620003d0565b60e084019590955250506001600160a01b03919091166101009091015297965050505050505056fe60806040523480156200001157600080fd5b50604051620008923803806200089283398101604081905262000034916200017b565b600062000042898262000344565b50600162000051888262000344565b50600262000060878262000344565b5060036200006f868262000344565b5060046200007e858262000344565b5060056200008d848262000344565b5060066200009c838262000344565b50600755506200041095505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000d657600080fd5b81516001600160401b0380821115620000f357620000f3620000ae565b604051601f8301601f19908116603f011681019082821181831017156200011e576200011e620000ae565b816040528381526020925086838588010111156200013b57600080fd5b600091505b838210156200015f578582018301518183018401529082019062000140565b83821115620001715760008385830101525b9695505050505050565b600080600080600080600080610100898b0312156200019957600080fd5b88516001600160401b0380821115620001b157600080fd5b620001bf8c838d01620000c4565b995060208b0151915080821115620001d657600080fd5b620001e48c838d01620000c4565b985060408b0151915080821115620001fb57600080fd5b620002098c838d01620000c4565b975060608b01519150808211156200022057600080fd5b6200022e8c838d01620000c4565b965060808b01519150808211156200024557600080fd5b620002538c838d01620000c4565b955060a08b01519150808211156200026a57600080fd5b620002788c838d01620000c4565b945060c08b01519150808211156200028f57600080fd5b506200029e8b828c01620000c4565b92505060e089015190509295985092959890939650565b600181811c90821680620002ca57607f821691505b602082108103620002eb57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033f57600081815260208120601f850160051c810160208610156200031a5750805b601f850160051c820191505b818110156200033b5782815560010162000326565b5050505b505050565b81516001600160401b03811115620003605762000360620000ae565b6200037881620003718454620002b5565b84620002f1565b602080601f831160018114620003b05760008415620003975750858301515b600019600386901b1c1916600185901b1785556200033b565b600085815260208120601f198616915b82811015620003e157888601518255948401946001909101908401620003c0565b5085821015620004005787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61047280620004206000396000f3fe6080604052600436106100915760003560e01c80637284e416116100595780637284e416146101155780639a68308f1461012a578063c59ee1dc1461013f578063f3ccaac014610155578063fdb330631461016a57600080fd5b80632636b9451461009657806340ea0a94146100bf578063411b007e146100c95780634a79d50c146100eb5780637233f2be14610100575b600080fd5b3480156100a257600080fd5b506100ac60075481565b6040519081526020015b60405180910390f35b6100c761017f565b005b3480156100d557600080fd5b506100de6102ab565b6040516100b69190610387565b3480156100f757600080fd5b506100de610339565b34801561010c57600080fd5b506100de610346565b34801561012157600080fd5b506100de610353565b34801561013657600080fd5b506100de610360565b34801561014b57600080fd5b506100ac60085481565b34801561016157600080fd5b506100de61036d565b34801561017657600080fd5b506100de61037a565b600854600754116101c75760405162461bcd60e51b815260206004820152600d60248201526c11d3d053081050d21251559151609a1b60448201526064015b60405180910390fd5b6009546040516000916001600160a01b03169034908381818185875af1925050503d8060008114610214576040519150601f19603f3d011682016040523d82523d6000602084013e610219565b606091505b50509050806102625760405162461bcd60e51b81526020600482015260156024820152741590531551481393d5081514905394d19154949151605a1b60448201526064016101be565b346008600082825461027491906103dc565b90915550506040514290349033907fcd909ec339185c4598a4096e174308fbdf136d117f230960f873a2f2e81f63af90600090a450565b600280546102b890610402565b80601f01602080910402602001604051908101604052809291908181526020018280546102e490610402565b80156103315780601f1061030657610100808354040283529160200191610331565b820191906000526020600020905b81548152906001019060200180831161031457829003601f168201915b505050505081565b600080546102b890610402565b600580546102b890610402565b600180546102b890610402565b600680546102b890610402565b600480546102b890610402565b600380546102b890610402565b600060208083528351808285015260005b818110156103b457858101830151858201604001528201610398565b818111156103c6576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156103fd57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c9082168061041657607f821691505b60208210810361043657634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212202fb44a26b00424deaf9797b4f5bfdd9547d8caf38e360bd83f03a6dc6fcf009464736f6c634300080f0033a2646970667358221220b4404b7abfcb6d63d8c3d8bfdd82d8277f71a4494f5334957cc596157616a19864736f6c634300080f0033";

type ProjectConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProjectConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Project__factory extends ContractFactory {
  constructor(...args: ProjectConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Project> {
    return super.deploy(overrides || {}) as Promise<Project>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Project {
    return super.attach(address) as Project;
  }
  override connect(signer: Signer): Project__factory {
    return super.connect(signer) as Project__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProjectInterface {
    return new utils.Interface(_abi) as ProjectInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Project {
    return new Contract(address, _abi, signerOrProvider) as Project;
  }
}
