/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { FundProject, FundProjectInterface } from "../FundProject";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "projectTitle",
        type: "string",
      },
      {
        internalType: "string",
        name: "projDescription",
        type: "string",
      },
      {
        internalType: "string",
        name: "projFounders",
        type: "string",
      },
      {
        internalType: "string",
        name: "projCategories",
        type: "string",
      },
      {
        internalType: "string",
        name: "projImage",
        type: "string",
      },
      {
        internalType: "string",
        name: "projSocial",
        type: "string",
      },
      {
        internalType: "string",
        name: "projMail",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "projGoalAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "donar",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "Funded",
    type: "event",
  },
  {
    inputs: [],
    name: "categories",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "founders",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "goalAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "image",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mail",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "makeDonation",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "raisedAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "social",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "title",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620008923803806200089283398101604081905262000034916200017b565b600062000042898262000344565b50600162000051888262000344565b50600262000060878262000344565b5060036200006f868262000344565b5060046200007e858262000344565b5060056200008d848262000344565b5060066200009c838262000344565b50600755506200041095505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000d657600080fd5b81516001600160401b0380821115620000f357620000f3620000ae565b604051601f8301601f19908116603f011681019082821181831017156200011e576200011e620000ae565b816040528381526020925086838588010111156200013b57600080fd5b600091505b838210156200015f578582018301518183018401529082019062000140565b83821115620001715760008385830101525b9695505050505050565b600080600080600080600080610100898b0312156200019957600080fd5b88516001600160401b0380821115620001b157600080fd5b620001bf8c838d01620000c4565b995060208b0151915080821115620001d657600080fd5b620001e48c838d01620000c4565b985060408b0151915080821115620001fb57600080fd5b620002098c838d01620000c4565b975060608b01519150808211156200022057600080fd5b6200022e8c838d01620000c4565b965060808b01519150808211156200024557600080fd5b620002538c838d01620000c4565b955060a08b01519150808211156200026a57600080fd5b620002788c838d01620000c4565b945060c08b01519150808211156200028f57600080fd5b506200029e8b828c01620000c4565b92505060e089015190509295985092959890939650565b600181811c90821680620002ca57607f821691505b602082108103620002eb57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033f57600081815260208120601f850160051c810160208610156200031a5750805b601f850160051c820191505b818110156200033b5782815560010162000326565b5050505b505050565b81516001600160401b03811115620003605762000360620000ae565b6200037881620003718454620002b5565b84620002f1565b602080601f831160018114620003b05760008415620003975750858301515b600019600386901b1c1916600185901b1785556200033b565b600085815260208120601f198616915b82811015620003e157888601518255948401946001909101908401620003c0565b5085821015620004005787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61047280620004206000396000f3fe6080604052600436106100915760003560e01c80637284e416116100595780637284e416146101155780639a68308f1461012a578063c59ee1dc1461013f578063f3ccaac014610155578063fdb330631461016a57600080fd5b80632636b9451461009657806340ea0a94146100bf578063411b007e146100c95780634a79d50c146100eb5780637233f2be14610100575b600080fd5b3480156100a257600080fd5b506100ac60075481565b6040519081526020015b60405180910390f35b6100c761017f565b005b3480156100d557600080fd5b506100de6102ab565b6040516100b69190610387565b3480156100f757600080fd5b506100de610339565b34801561010c57600080fd5b506100de610346565b34801561012157600080fd5b506100de610353565b34801561013657600080fd5b506100de610360565b34801561014b57600080fd5b506100ac60085481565b34801561016157600080fd5b506100de61036d565b34801561017657600080fd5b506100de61037a565b600854600754116101c75760405162461bcd60e51b815260206004820152600d60248201526c11d3d053081050d21251559151609a1b60448201526064015b60405180910390fd5b6009546040516000916001600160a01b03169034908381818185875af1925050503d8060008114610214576040519150601f19603f3d011682016040523d82523d6000602084013e610219565b606091505b50509050806102625760405162461bcd60e51b81526020600482015260156024820152741590531551481393d5081514905394d19154949151605a1b60448201526064016101be565b346008600082825461027491906103dc565b90915550506040514290349033907fcd909ec339185c4598a4096e174308fbdf136d117f230960f873a2f2e81f63af90600090a450565b600280546102b890610402565b80601f01602080910402602001604051908101604052809291908181526020018280546102e490610402565b80156103315780601f1061030657610100808354040283529160200191610331565b820191906000526020600020905b81548152906001019060200180831161031457829003601f168201915b505050505081565b600080546102b890610402565b600580546102b890610402565b600180546102b890610402565b600680546102b890610402565b600480546102b890610402565b600380546102b890610402565b600060208083528351808285015260005b818110156103b457858101830151858201604001528201610398565b818111156103c6576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156103fd57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c9082168061041657607f821691505b60208210810361043657634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212202fb44a26b00424deaf9797b4f5bfdd9547d8caf38e360bd83f03a6dc6fcf009464736f6c634300080f0033";

type FundProjectConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundProjectConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundProject__factory extends ContractFactory {
  constructor(...args: FundProjectConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    projectTitle: PromiseOrValue<string>,
    projDescription: PromiseOrValue<string>,
    projFounders: PromiseOrValue<string>,
    projCategories: PromiseOrValue<string>,
    projImage: PromiseOrValue<string>,
    projSocial: PromiseOrValue<string>,
    projMail: PromiseOrValue<string>,
    projGoalAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FundProject> {
    return super.deploy(
      projectTitle,
      projDescription,
      projFounders,
      projCategories,
      projImage,
      projSocial,
      projMail,
      projGoalAmount,
      overrides || {}
    ) as Promise<FundProject>;
  }
  override getDeployTransaction(
    projectTitle: PromiseOrValue<string>,
    projDescription: PromiseOrValue<string>,
    projFounders: PromiseOrValue<string>,
    projCategories: PromiseOrValue<string>,
    projImage: PromiseOrValue<string>,
    projSocial: PromiseOrValue<string>,
    projMail: PromiseOrValue<string>,
    projGoalAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      projectTitle,
      projDescription,
      projFounders,
      projCategories,
      projImage,
      projSocial,
      projMail,
      projGoalAmount,
      overrides || {}
    );
  }
  override attach(address: string): FundProject {
    return super.attach(address) as FundProject;
  }
  override connect(signer: Signer): FundProject__factory {
    return super.connect(signer) as FundProject__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundProjectInterface {
    return new utils.Interface(_abi) as FundProjectInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FundProject {
    return new Contract(address, _abi, signerOrProvider) as FundProject;
  }
}
