/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BlogListInterface extends utils.Interface {
  functions: {
    "createBlog(string,string,string,string,string,string)": FunctionFragment;
    "publishedBlogs(uint256)": FunctionFragment;
    "totalPublishedBlogs()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createBlog"
      | "publishedBlogs"
      | "totalPublishedBlogs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createBlog",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "publishedBlogs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPublishedBlogs",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "createBlog", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishedBlogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPublishedBlogs",
    data: BytesLike
  ): Result;

  events: {
    "BlogCreated(string,string,string,string,string,string,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlogCreated"): EventFragment;
}

export interface BlogCreatedEventObject {
  title: string;
  description: string;
  owner: string;
  categories: string;
  image: string;
  social: string;
  ownerWallet: string;
  blogAddress: string;
  timestamp: BigNumber;
}
export type BlogCreatedEvent = TypedEvent<
  [string, string, string, string, string, string, string, string, BigNumber],
  BlogCreatedEventObject
>;

export type BlogCreatedEventFilter = TypedEventFilter<BlogCreatedEvent>;

export interface BlogList extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlogListInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createBlog(
      _blogTitle: PromiseOrValue<string>,
      _blogDescription: PromiseOrValue<string>,
      _blogOwner: PromiseOrValue<string>,
      _blogCategories: PromiseOrValue<string>,
      _blogImage: PromiseOrValue<string>,
      _blogSocial: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    publishedBlogs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalPublishedBlogs(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  createBlog(
    _blogTitle: PromiseOrValue<string>,
    _blogDescription: PromiseOrValue<string>,
    _blogOwner: PromiseOrValue<string>,
    _blogCategories: PromiseOrValue<string>,
    _blogImage: PromiseOrValue<string>,
    _blogSocial: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  publishedBlogs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalPublishedBlogs(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    createBlog(
      _blogTitle: PromiseOrValue<string>,
      _blogDescription: PromiseOrValue<string>,
      _blogOwner: PromiseOrValue<string>,
      _blogCategories: PromiseOrValue<string>,
      _blogImage: PromiseOrValue<string>,
      _blogSocial: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    publishedBlogs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalPublishedBlogs(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "BlogCreated(string,string,string,string,string,string,address,address,uint256)"(
      title?: null,
      description?: null,
      owner?: null,
      categories?: null,
      image?: null,
      social?: null,
      ownerWallet?: PromiseOrValue<string> | null,
      blogAddress?: null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): BlogCreatedEventFilter;
    BlogCreated(
      title?: null,
      description?: null,
      owner?: null,
      categories?: null,
      image?: null,
      social?: null,
      ownerWallet?: PromiseOrValue<string> | null,
      blogAddress?: null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): BlogCreatedEventFilter;
  };

  estimateGas: {
    createBlog(
      _blogTitle: PromiseOrValue<string>,
      _blogDescription: PromiseOrValue<string>,
      _blogOwner: PromiseOrValue<string>,
      _blogCategories: PromiseOrValue<string>,
      _blogImage: PromiseOrValue<string>,
      _blogSocial: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    publishedBlogs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPublishedBlogs(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createBlog(
      _blogTitle: PromiseOrValue<string>,
      _blogDescription: PromiseOrValue<string>,
      _blogOwner: PromiseOrValue<string>,
      _blogCategories: PromiseOrValue<string>,
      _blogImage: PromiseOrValue<string>,
      _blogSocial: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    publishedBlogs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPublishedBlogs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
